{"version":3,"sources":["firebase.js","Answer.js","Answers.js","Question.js","Questions.js","Result.js","Quiz.js","App.js","serviceWorker.js","index.js"],"names":["firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","style","hover","boxShadow","fontWeight","transition","cursor","unhover","clicked","backgroundColor","color","unclicked","image","float","width","display","textAlign","itemAlign","Answer","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onMouseEnterHandler","setState","onMouseLeaveHandler","state","fbkey","index","response","result","selected","console","log","react_default","a","createElement","className","objectSpread","onMouseOver","bind","onMouseLeave","onClick","src","alt","React","Component","Answers","answers","selectedIndex","handleResults","qindex","_this2","database","ref","concat","once","snap","forEach","i","push","val","_this3","keys","map","src_Answer","Question","question","src_Answers","Questions","results","toConsumableArray","length","quizSize","includes","undefined","endQuiz","fbkeys","key","src_Question","description","Quiz","mode","array","modeMap","maxEl","maxCount","el","resultsRef","scrollToBottom","quizEnd","scrollIntoView","behavior","src_Questions","Result","clear","App","src_Quiz","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7c958a01.chunk.js","sourcesContent":["  // Initialize Firebase\n\nimport * as firebase from 'firebase'\n\n  const config = {\n    apiKey: \"AIzaSyA57B5MZd5ZNA0kO78UfOi3ubj5vz4xV0M\",\n    authDomain: \"milleniumprizepersonalityquiz.firebaseapp.com\",\n    databaseURL: \"https://milleniumprizepersonalityquiz.firebaseio.com\",\n    projectId: \"milleniumprizepersonalityquiz\",\n    storageBucket: \"milleniumprizepersonalityquiz.appspot.com\",\n    messagingSenderId: \"165315641319\"\n  };\n  firebase.initializeApp(config);\n\nexport default firebase;","import React, {Component} from 'react';\n\nimport firebase from './firebase';\n\nconst style = {\n    hover: {\n        boxShadow: \"0px 0px 3px 3px #ededed\",\n        fontWeight: \"500\",\n        transition: \"250ms\",\n        cursor: \"pointer\"\n    },\n    unhover: {\n        transition: \"250ms\"\n    },\n    clicked: {\n        backgroundColor: \"#0000fe\",\n        fontWeight: \"500\",\n        color: \"#ffffff\"\n    },\n    unclicked: {\n        backgroundColor: \"#ffffff\",\n        color: \"#6f6f6f\"\n    },\n    image: {\n        float: 'center',\n        width: \"90%\",\n        display: \"flex\",\n        textAlign: \"center\",\n        itemAlign: \"center\"\n      }\n}\n\nclass Answer extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            fbkey: this.props.fbkey,\n            index: this.props.index,\n            image: this.props.image,\n            response: this.props.response,\n            result: this.props.result,\n            hover: 'unhover',\n            selected: ''\n        }\n    }\n\n    onMouseEnterHandler = () => {\n        this.setState({\n            hover: 'hover'\n        });\n    }\n\n    onMouseLeaveHandler =  () => {\n        this.setState({\n            hover: 'unhover'\n        });\n    }\n\n      render () {\n          let image;\n          if (this.state.image) {\n              image = \"image\"\n              console.log(image);\n          }\n          else {\n              image = \"\"\n          }\n          return (\n            <div className={\"Answer \" + image}\n                style={{...style[this.state.hover], ...style[this.props.style]}}\n                onMouseOver={this.onMouseEnterHandler.bind(this)} \n                onMouseLeave={this.onMouseLeaveHandler.bind(this)}\n                onClick={this.props.onClick}\n                >       \n                \n                { this.state.image\n                ? \n                    <img style={style['image']} src={this.state.image} alt=\"\" />    \n\n                : <p></p>}\n\n                {this.state.response\n                ? <p>{this.state.response}</p>\n                : <p></p> }\n\n\n            </div>\n          );\n      }\n}\n\nexport default Answer;","import React, {Component} from 'react';\n\nimport Answer from './Answer';\n\nimport firebase from './firebase';\n\nconst style = {\n    clicked: {\n        backgroundColor: \"#0000fe\",\n        fontWeight: \"500\",\n        color: \"#ffffff\"\n    },\n    notclicked: {\n        backgroundColor: \"#ffffff\",\n        color: \"#dddddd\"\n    }\n}\n\nclass Answers extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            qindex: this.props.index,\n            fbkey: this.props.fbkey,\n            answers: '',\n            //images: false,\n            response: '', // this is the value of the response the user gives\n            result: '',\n            selectedIndex: ''\n        }\n    }\n\n    onClick = (index) => {\n        const response = this.state.answers[index].response;\n        const result = this.state.answers[index].result;\n        const selectedIndex = index;\n        \n        this.setState({ \n            response: response,\n            result: result,\n            selectedIndex: selectedIndex\n        });\n\n        this.props.handleResults(this.state.qindex, result);\n\n    }\n\n    componentDidMount(){\n    const answersRef = firebase.database().ref(`Questions/${this.state.fbkey}/answers`);\n\n    answersRef.once(\"value\", (snap) => {\n      let answers = [];\n      snap.forEach((i)=>{\n        answers.push(i.val());\n      });\n      \n      this.setState({\n        answers: answers\n      });\n    })\n  }\n\n    render() {\n        return Object.keys(this.state.answers).map((index) => {\n            let style;\n            if (this.state.selectedIndex === index) {\n                style = \"clicked\"\n            }\n            else if (this.state.selectedIndex === '') {\n                style = \"\"\n            }\n            else {\n                    style = \"unclicked\"\n            }\n\n            return <Answer \n                index={index}\n                response={this.state.answers[index].response}\n                result={this.state.answers[index].result}\n                image={this.state.answers[index].image}\n                fbkey={this.props.fbkey}\n                onClick={() => this.onClick(index)}\n                style={style}\n                />\n          }  );\n    }\n}\n\n\nexport default Answers;","import React, {Component} from 'react';\n\nimport Answers from './Answers';\n\nimport firebase from './firebase';\n\nclass Question extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            fbkey: this.props.fbkey,\n            question: '',\n            result: ''\n        }\n    }\n\n    componentDidMount(){\n        const questionRef = firebase.database().ref(`Questions/${this.state.fbkey}/question`);\n        questionRef.once(\"value\", (snap) => {\n            let question = snap.val();\n          \n          this.setState({\n            question: question\n          });\n        })\n      }\n\n    render() {\n        return (\n            <div>\n                <h2>{this.state.question}</h2>\n                <Answers fbkey={this.state.fbkey} \n                        handleResults={this.props.handleResults}\n                        index={this.props.index} ></Answers>\n            </div>\n        );\n    }\n        \n}\n\nexport default Question;","import React, {Component} from 'react';\n\nimport Question from './Question';\n\nimport firebase from './firebase';\n\nclass Questions extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            quizSize: 5, //pigeonhole principle. make the person choose one!!\n            fbkeys: '',\n            results: []\n        }\n    }\n\n    componentDidMount(){\n    const questionsRef = firebase.database().ref(`Questions`);\n\n    questionsRef.once(\"value\", (snap) => {\n      let fbkeys = [];\n        Object.keys(snap.val()).forEach((key)=>{\n            fbkeys.push(key);\n        });\n        console.log(fbkeys);\n\n      this.setState({\n        fbkeys: fbkeys\n      });\n    })\n  }\n\n  handleResults = (index, result) => {\n    let results = [...this.state.results];\n    results[index] = result;\n\n    console.log(results);\n    this.setState({\n        results: results\n    })\n\n    if((results.length === this.state.quizSize)&&(!results.includes(undefined))) {\n        this.props.endQuiz(results);\n    }\n  }\n\n    render() {\n        return (\n            <div>\n                { this.state.fbkeys\n                ? \n                (Object.keys(this.state.fbkeys).map((index) =>\n                <Question fbkey={this.state.fbkeys[index]}\n                            handleResults={this.handleResults}\n                            index={index}\n                         />\n              ))\n              : <h2>Loading...</h2>           \n            }\n            </div>\n        );\n    }\n}\n\n\nexport default Questions;","import React from 'react';\n\n\nconst result = (props) => {\n    return (\n       <div className=\"finalResult\">\n           <h1>You got: {props.result}</h1>\n            <p>{props.description}</p>\n        </div>\n    );\n    \n}\n\nexport default result;","import React, {Component} from 'react';\n\nimport Questions from './Questions';\nimport Result from './Result';\n\nimport firebase from './firebase';\n\nclass Quiz extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            fbkeys: '',\n            result: '',\n            description: ''\n        }\n    }\n\n    mode = (array) => {\n        if(array.length == 0) {\n            return null;\n        }\n        var modeMap = {};\n        var maxEl = array[0], maxCount = 1;\n        for(var i = 0; i < array.length; i++) {   \n            var el = array[i];\n            if(modeMap[el] == null) {\n                modeMap[el] = 1;\n            }\n            else {\n                modeMap[el]++;  \n            }\n            if(modeMap[el] > maxCount) {\n                maxEl = el;\n                maxCount = modeMap[el];\n            }\n        }\n        return maxEl;\n    }\n    \n\n\n\n  endQuiz = (results) => {\n    let result = this.mode(results);\n    console.log(result);\n\n    const resultsRef = firebase.database().ref(`Results/${result}`);\n    let description = '';\n\n    resultsRef.once(\"value\", (snap) => {\n        description = snap.val().description;\n        console.log(description);    \n        this.setState({\n            result: result,\n            description: description\n        });\n    });\n    this.scrollToBottom();\n  }\n\n  scrollToBottom = () => {\n    this.quizEnd.scrollIntoView({ behavior: \"smooth\" });\n  }\n  \n\n    render() {\n        return (\n            <div>\n                <Questions endQuiz={this.endQuiz} />\n                    { this.state.description !== ''\n                    ? \n                    <Result\n                    result={this.state.result}\n                    description={this.state.description}\n                    ref={(el) => { this.Result = el; }}></Result>\n                    : <div></div> }\n                \n                <div\n                    style={{ float:\"left\", clear: \"both\" }}\n                    ref={(el) => { this.quizEnd = el; }} >\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Quiz;","import React, { Component } from 'react';\nimport './App.css';\n\nimport Quiz from './Quiz';\n\nclass App extends Component {\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n\n        </header>\n        <div>\n          <h1>This Test Will Tell You Which Millennium Prize Problem\n            You Are\n          </h1>\n          <p className=\"subtitle\">\n            Poincaré? More like Poincar-<span>ayyy</span>\n          </p>\n          <Quiz></Quiz>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}